[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rif2graph"
version = "0.1.0"
description = "Convert GeneRIFs to knowledge graphs using biomedical NLP"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pranav Karra", email = "pranavkarra001@gmail.com"}
]
keywords = ["bioinformatics", "nlp", "knowledge-graphs", "generifs", "biomedicine"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.10"
dependencies = [
    "networkx>=3.4,<4.0",
    "pandas>=2.2,<3.0",
    "python-dotenv>=1.0,<2.0",
    "spacy>=3.7,<4.0",
    "scispacy>=0.5,<1.0",
    "transformers>=4.42,<5.0",
    "torch>=2.3,<3.0",
    "requests>=2.31,<3.0",
    "click>=8.1,<9.0",
    "tqdm>=4.66,<5.0",
    "matplotlib>=3.8,<4.0",
    "seaborn>=0.13,<1.0",
    "scikit-learn>=1.3,<2.0",
    "biopython>=1.83,<2.0",
    "lxml>=4.9,<5.0",
    "beautifulsoup4>=4.12,<5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4,<8.0",
    "pytest-cov>=4.1,<5.0",
    "black>=23.0,<24.0",
    "ruff>=0.5,<1.0",
    "pre-commit>=3.6,<4.0",
    "mypy>=1.8,<2.0",
]
gpu = [
    "sentencepiece>=0.2,<1.0",
    "uvloop>=0.19,<1.0",
]

[project.urls]
Homepage = "https://github.com/Pranav-Karra-3301/rif2graph"
Repository = "https://github.com/Pranav-Karra-3301/rif2graph"
Issues = "https://github.com/Pranav-Karra-3301/rif2graph/issues"

[project.scripts]
download-generifs = "gene_rif_graph.scripts.download_data:main"
extract-triplets = "gene_rif_graph.scripts.extract_triplets:main"
build-graph = "gene_rif_graph.scripts.build_graph:main"
analyze-graph = "gene_rif_graph.scripts.analyze_graph:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
